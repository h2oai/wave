name: Release Wave

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version'
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VERSION: "${{ github.event.inputs.version }}"
  TAG: "v${{ github.event.inputs.version }}"

jobs:
  release:
    name: Release Wave
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GIT_TOKEN }}

      - uses: actions/setup-go@v1
        with:
          go-version: '1.16'

      - name: Setup
        run: make setup

      - name: Unit Test
        run: make test-ui-ci

      - name: Build Release
        run: make release

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          draft: false

      - name: Upload MacOS Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./build/wave-${{ env.VERSION }}-darwin-amd64.tar.gz"
          asset_name: "wave-${{ env.VERSION }}-darwin-amd64.tar.gz"
          asset_content_type: application/gzip

      - name: Upload MacOS M1 Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./build/wave-${{ env.VERSION }}-darwin-arm64.tar.gz"
          asset_name: "wave-${{ env.VERSION }}-darwin-arm64.tar.gz"
          asset_content_type: application/gzip

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./build/wave-${{ env.VERSION }}-linux-amd64.tar.gz"
          asset_name: "wave-${{ env.VERSION }}-linux-amd64.tar.gz"
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./build/wave-${{ env.VERSION }}-windows-amd64.tar.gz"
          asset_name: "wave-${{ env.VERSION }}-windows-amd64.tar.gz"
          asset_content_type: application/gzip

      - name: Upload OS-agnostic Wheel
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./py/dist/h2o_wave-${{ env.VERSION }}-py3-none-any.whl"
          asset_name: "h2o_wave-${{ env.VERSION }}-py3-none-any.whl"
          asset_content_type: application/gzip

      - name: Upload MacOS Wheel
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./py/dist/h2o_wave-${{ env.VERSION }}-py3-none-macosx_10_9_x86_64.whl"
          asset_name: "h2o_wave-${{ env.VERSION }}-py3-none-macosx_10_9_x86_64.whl"
          asset_content_type: application/gzip

      - name: Upload MacOS Big Sur M1 Wheel
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./py/dist/h2o_wave-${{ env.VERSION }}-py3-none-macosx_11_0_arm64.whl"
          asset_name: "h2o_wave-${{ env.VERSION }}-py3-none-macosx_11_0_arm64.whl"
          asset_content_type: application/gzip

      - name: Upload MacOS Monterey M1 Wheel
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./py/dist/h2o_wave-${{ env.VERSION }}-py3-none-macosx_12_0_arm64.whl"
          asset_name: "h2o_wave-${{ env.VERSION }}-py3-none-macosx_12_0_arm64.whl"
          asset_content_type: application/gzip

      - name: Upload Windows Wheel
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./py/dist/h2o_wave-${{ env.VERSION }}-py3-none-win_amd64.whl"
          asset_name: "h2o_wave-${{ env.VERSION }}-py3-none-win_amd64.whl"
          asset_content_type: application/gzip

      - name: Upload Linux Wheel
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./py/dist/h2o_wave-${{ env.VERSION }}-py3-none-manylinux1_x86_64.whl"
          asset_name: "h2o_wave-${{ env.VERSION }}-py3-none-manylinux1_x86_64.whl"
          asset_content_type: application/gzip

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          packages_dir: py/dist
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to Conda
        uses: amauryval/publish_conda_package_action@1.1.0
        with:
          CondaDir: 'py/conda'
          CondaUsername: ${{ secrets.CONDA_USERNAME }}
          CondaPassword: ${{ secrets.CONDA_PASSWORD }}

      - name: Publish Docs
        run: |
          make publish-website
          aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
        env:
          AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}

      # Needed for PyCharm plugin publish.
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle
      
      - name: Publish Plugin
        env:
          JETBRAINS_PUBLISH_TOKEN: ${{ secrets.JETBRAINS_PUBLISH_TOKEN }}
        run: make publish-pycharm

      - name: Publish to S3
        run: make publish-release-s3

      # Call some time after cloudfront cache bust - crawler needs to hit fresh cache.
      - name: Reindex Algolia search
        run: |
          curl -X POST -H "Content-Type: application/json" --user $ALGOLIA_CRAWLER_USER_ID:$ALGOLIA_CRAWLER_API_KEY  https://crawler.algolia.com/api/1/crawlers/$ALGOLIA_CRAWLER_ID/reindex
        env:
          ALGOLIA_CRAWLER_API_KEY: ${{ secrets.ALGOLIA_CRAWLER_API_KEY }}
          ALGOLIA_CRAWLER_ID: ${{ secrets.ALGOLIA_CRAWLER_ID }}
          ALGOLIA_CRAWLER_USER_ID: ${{ secrets.ALGOLIA_CRAWLER_USER_ID }}

      - name: Publish apps for Managed Cloud
        run: make build-apps publish-apps-s3
        env:
          MC_S3_BUCKET : ${{ secrets.MC_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.MC_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY : ${{ secrets.MC_AWS_SECRET_ACCESS_KEY  }}